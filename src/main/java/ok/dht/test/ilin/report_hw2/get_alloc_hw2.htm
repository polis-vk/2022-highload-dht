<!DOCTYPE html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<style>
	body {margin: 0; padding: 4px 8px 24px; background-color: #ffffff; overflow-y: scroll}
    h1 {margin: 5px 0 0 0; font-size: 18px; font-weight: normal; text-align: center}
	header {margin: -24px 0 5px 0; line-height: 24px}
	button {font: 12px sans-serif; cursor: pointer}
	p {margin: 5px 0 5px 0}
	a {color: #0366d6}
	#hl {position: absolute; display: none; overflow: hidden; white-space: nowrap; pointer-events: none; background-color: #ffffe0; outline: 1px solid #ffc000; height: 15px}
	#hl span {padding: 0 3px 0 3px}
	#status {overflow: hidden; white-space: nowrap}
	#match {overflow: hidden; white-space: nowrap; display: none; float: right; text-align: right}
	#reset {cursor: pointer}
	#canvas {width: 100%; height: 300px}

    .selectionPart {position: absolute; display: none; pointer-events: none; box-sizing: border-box;}
    .sel {background-color: #dada0040}
    .act {background-color: #00da0040}
    .dif {background-color: #00dada40}
    .top {border-top: .1px solid #000}
    .left {border-left: .1px solid #000}
    .bottom {border-bottom: .1px solid #000}
    .right {border-right: .1px solid #000}

    #info-tooltip {display: none; position: absolute; top: 100px; right: 32px; width: 204px; border: 1px solid #666666; background: #ffffe0; border-radius: 8px; padding: 4px}
    #heatmap-height-line, #heatmap-info { text-decoration: #0366d6 dashed underline; cursor: pointer; font-family: monospace}
    #heatmap-info {cursor: help}
    #heatmap-info:hover + #info-tooltip {display: block}

    .colortip {width: 100px; box-sizing: border-box; padding: 4px; background: linear-gradient(var(--c1), var(--c2))}


</style>
</head>
<body style='font: 12px Verdana, sans-serif'>


<div style="display: flex">
    <div style="width: 20px; margin-right: 2px; float: left; writing-mode: vertical-rl; transform: scale(-1); text-align: center; user-select: none"><pre id="heatmap-height-line"> 1 sec : 20 ms </pre></div>

    <div id='heatmap-canvas-container' style="width: 100%; position: relative" autofocus>
        <div id='heatmap-canvas-wrapper' style='overflow: hidden; width: 100%'>
            <canvas id='heatmap-canvas' style='height: 314px'></canvas>
        </div>

        <div id='middleActive' class='selectionPart top bottom act'><span></span></div>
        <div id='leftActive' class='selectionPart top left bottom act'><span></span></div>
        <div id='rightActive' class='selectionPart top right bottom act'><span></span></div>
        <div id='leftMiddleActive' class='selectionPart right'><span></span></div>
        <div id='rightMiddleActive' class='selectionPart left'><span></span></div>

        <div id='middleSelection' class='selectionPart top bottom sel'><span></span></div>
        <div id='leftSelection' class='selectionPart top left bottom sel'><span></span></div>
        <div id='rightSelection' class='selectionPart top right bottom sel'><span></span></div>
        <div id='leftMiddleSelection' class='selectionPart right'><span></span></div>
        <div id='rightMiddleSelection' class='selectionPart left'><span></span></div>

        <div id='middleDiff' class='selectionPart top bottom dif'><span></span></div>
        <div id='leftDiff' class='selectionPart top left bottom dif'><span></span></div>
        <div id='rightDiff' class='selectionPart top right bottom dif'><span></span></div>
        <div id='leftMiddleDiff' class='selectionPart right'><span></span></div>
        <div id='rightMiddleDiff' class='selectionPart left'><span></span></div>
    </div>

    <div id="heatmap-info" style="width: 20px; margin-right: 2px; writing-mode: vertical-rl; text-align: center; user-select: none">
        <pre> Info </pre>
    </div>
    <div id="info-tooltip">
        <div style="float:left">
            <div style="padding: 4px;">Frame types:</div>
            <div class="colortip" style="--c1:#b2e1b2;--c2:#c6f5c6">Interpreted</div>
            <div class="colortip" style="--c1:#50e150;--c2:#6eff6e">JIT-Compiled</div>
            <div class="colortip" style="--c1:#50cccc;--c2:#6eeaea">Inlined</div>
            <div class="colortip" style="--c1:#e15a5a;--c2:#ff8282">Native</div>
            <div class="colortip" style="--c1:#c8c83c;--c2:#e6e646">C++</div>
            <div class="colortip" style="--c1:#e17d00;--c2:#ff9b00">Kernel</div>
            <div class="colortip" style="--c1:#cce880;--c2:#e0fc94">C1-Compiled</div>
        </div>
        <div style="float:left; margin-left: 4px">
            <div style="padding: 4px;">Special colors:</div>
            <div class="colortip" style="--c1:#ee00ee;--c2:#ee00ee">Matches regexp</div>
            <div class="colortip" style="--c1:#baa551;--c2:#baa551">New frames</div>
            <div class="colortip" style="--c1:#f0f0c0;--c2:#f0f0c0">Same frames</div>
            <div class="colortip" style="--c1:#99aaff;--c2:#99aaff">Less frames</div>
            <div class="colortip" style="--c1:#ffaa99;--c2:#ffaa99">More frames</div>
        </div>
        <div style="float:left; margin-top: 4px; width: 100%; border: 1px solid #666666; border-radius: 2px; padding: 2px; box-sizing: border-box;">
            Shift + Click - Select range<br>
            Ctrl + Click - Compare<br>
            Ctrl + F - Search<br>
        </div>
    </div>
</div>
<div id="executionsHeatmap" style="display:none">BD}BAIe@uAxwM????????????????????????????????????????????????????????????????@?GA@??G?AGGA@?@?O@??@AG?@A@?@?O@??W@??@A?G@?P?@?A??GB@??@?O?@GP??GA??@GP??GA???JG??GA???R???GA???CH??@?A??@W??J??G??G??WG?OO?A??H??A@?I??GG?O?G@O?GG?A?GGA?G@@G?@@O?G?GA??HA?G@?O???H?P?GAG???GO@??J??@?OG??IG??@OG??GP??GP???I@??B@???GP??W@?G?O?G@A?@@?O?@@O?@?GO??OA?@@?O??@W?@?GA??@GO@@?A???O?AG@CO?G????A@?DG???@O@?G?Q?@O?G@???AY?@?G???B?XG?????O@I?O??GO@??I?H?I?H????P?IA????A?GGOH???O??CG?A?A???@@O?GWG??G??P?@?WG??A?@?GOA??O???Q??GW????Q@??@B?@@??OG@?OO????P@??P?G?A?H??O@@?O??@I??@I????`@???G?O?OO?G?I??A??A@@??P??GA@?G?OG?@O??OA??@GO??@X???@??OH?OG?@O?@@??OH??AG?G?OA??A@?@A?@?GO??HA???R?@??@?O@@BG?????P?W?O???A?AO??HGA??O?A??JG???@??a??G????IDG??G??GP?I??G?HP??@GAG?W@???OOG?H?W??W?@?@GW??I?@?@GB??W?@??HP??GGP??W?G?@GP??B?G?A?AG?I?G?@@OG??OW?A?OG??OB??OAG??AB??OA@??HAG?I?@??@IG?@GB??GOG?@@B???W@??OA@?@O@??@J???AAG?B?G??@IG??OP??B?G??AB??@GW??@P??@GB??@P???HAG?@P???GGW??J???H?B?@B???@@P??AO?GA?P??I??G?OAO??G?BG@AH???GBG@?X???@AO?GWG??@?X?GBG??@?Q?@AO???GCG?GBG??@?`??GX???GCO??????IDG???GG@?QG?A?G?GPG?G?AG?BO???B?@?HO@??OO?GGW??AA?@A???W@@?OO?@A@G?I@??AB??G?W??OAG??Q??G@P??O??OH@OG??@B?GJ???@GGBG?O??H?WG?@?@AHGO@@??@P?@GAH?@?OGG?X???J?@@A@??H??W@GO@??HA?OGO??GGI@@?O?@@GAG??@@P?HA?@G?@P?@?W?H?B??O@?W??GIG?@P??GGA@??OO@?AO??HA@?A??A?OGOG??W?H?HA?@@?AG@G?OG?@W?G@?A@?OO@?@?W?A?B??O?A@@?WG??I@?GAA?G?GOG@GA?@?I@?H???aG?????BIO???@@GX?G??O@?R???G?X@W??G??J@G?G?OB?AGG??IG?HO?@G?IHG??B??CGG?@I??AGO?GG?I@@?G?P@GA@G?@B??GW@??OO@H?A?G@@AG?OA?@?@WG@??GPGH?P??@@WGB???@@GX????JG@W????IOHA??@?Q@?G??B@A??OH?GAG@?I@?@B@??G@B?@G??X?W?GG?@W?GI@??@GAGA??OGGGOGG@O@?@?IG@?@OH?GP???HP?A???WHO?@G?B?H?GP??@?X?@I??HGA?G@?@W?@I?G?@GOA??I@@G?P??@I@?@I?@A?O@?@?IG?OO?@?@I?O??@a???@??BW??B??@CH@?@??BI?A?G?@@WGGG?AGAAH??@O?H@W?@@?@PH?@A?@@IH?@?A?H@O?G@?@BH?GA?G?QH?@?O?GIO@?G?@AP@?AG?@BGG@A??GHA@@??@IA?I??G@GQ@??O?G@`G??G?@O`??B???HW@B???@H?`@???@PGQ?@??@II?A???GHW?G??@BR@????APH???AAGX???GAGHW?@?@@AP?@?AG?QGG?GO?GHO?GG?GCG@?I??GJ@GG?A?@GJG??G?G`B??@???h@??G??CJ@G????JGI????HIAG???I?G`GG??@A@HA??G?OP?GGO?@@GX?G??GQKO@????CJ?@A???RG@@??@OO@J??@?I?WW?@?@?`?G@@OG@GI@@?G?`?H?O?GAOA?G?W@G?PO?G@A@HW?G?@?QH@??A@OB??@?JGA??I?H@AH?@?X??PAG?H?AH@@?O@?J?H?G@OGGGWG?G@OAGG?O@@@P@?G@OGH?IG?GGOH@G?O@@B?H?G@P?GJ?G?GGAOGG?O@@GW@?GB?GO@AG@?@P@?OA?@AA@G@?@P?GJ@??GGOOH??OGGI@G?GWG@@GOGG@?PG@GO?@HA@GG?@W@?QG?@@A@HG??P?GIGG?IGG@@GOGGG?X?@GO?GCG?H@??IH?@X??@I?H@GO@?GHP?GG?a??G???hO?@?O?A`G??@?@Y???J??Z???A??`O?O?G?BP?G?G?AP@W???@R?O???BOOG?@?BGGG?I?@HOG?@GAGGO?O@@GOH?G@P?GHB??HA?OA?P?@?HW?H?A@?`?@?@G@PG@?@W?HO?O@GAGG@I@?GGOA@G@GA?B@?H?@W@@@O@@GAH?GGP?GA?W?A?AH@GO@?@GI@G@?A@AA@??H@AH@??J?@GP@?A?B?H@A@?A?P?@HO@?H?@OO@?PG@@W??HGB?O?AH?HB???P?WA???WGOP???HWH@?A?HHO@??HBA?G?AH@B?G?@HB@?@?BGHA@??A@WG@??PGOP???HKOG?????pG?GA??JOG?@?@J@??IG?J@??@Q?HG??BH?WG?G@W?GGGO@G?WG?GAOGGG?GIGGO@G?OO?GAO?P??GPG@I@??AO@@@I?@G@@B@?@O@GAAG?GA?B@G?P?GHB??H@?PA?AA??HB?@A?AGGGAH?GGO?AI?GGG?BA?GGW?@HAG?O?AGAO?G?@OOO?G?GWHO?H??OPG?OA?GHO?HG?GOG?`@?@G@?Q@?@OG?HP??GW?GH@?O@@IG@@?@B@G@A@?AAGG@GA@@GGAG@@AG?AI@?@G?GX@?AO??Q??@`??OG?@P@?AP??HA?AH?AGG?J@?A?O@H@?W?G@WG?O?PGGGCOG?????p@?@?A?CI@??@?@X@??B?@PP??@?@WO@?P?@GWG?H?AHGG?W?@HOG?O?AOH?B??AI@?A??Q@@?B??IAG?A??QA??W??IAG@G??PGW@??AGPG?G?B?KG?GG?G@X?@G?W?POG?@G?XGG?B??POG?A?B?GOA@?A@B?G@?P@A?P??H@AGH?@I?HA?G@GIG@@?AH@GO@?AGOH?G?PH@O?G?IAH?@??QGI?G??WPG?G?AP@O@??AIA?@??CGGW@??@OPGG??B?QG???I?XG??@B@WG@??AAGGB??G@HP@?@?@WHA?@?GOWG??GIGOO?H?@I@??Q?@H@??X?@I@??SO??G???pG?@??AJOG???@R?H??A@PAG??GAO@O??WGGIG??P?OHG??W@I@??AGB?O??I?B?W@?@?IHG@?AGGIG??J?G@GG?P?HOG??J?GH?G?P@@P???`?G@GG?P?OP??AO?GH@?B?@I@?GO?A?IA@?GG@OA@@?W@?B@?AGA@G@?W@GGOGGG@O@GGI@@?B?GHGO@@@?J?G@O@GHA??HGOGO??IA?GW?GGB@?H?GP@@@AG?HO@@GGA?@HAGG@?GOB?GB??GCG?@O?P@G?@P?OAG@@@?O@HO@??HP?G@GA?HB?@?@GP@?H?A?HI?G?@IG@@@?A@GW@??HAGG@G?OA@a??@???LG?@?GOBO?@?@GCG?@@?O?X?P?@?@W?I?B?A?@OGA?B??HGW?H??W?W?P??OAG?OGA?AGAG?@GB?H?GA?AGP??GGP?O@?O?OHO??GGW@G@A?@GX??@@AGH?@A?A?QG?@?B@H@?OG@@I@?H?O@H@?P?GGW@@@A@?O@A?H@?W@@@OGA?@O@@GB?@G@B?A?GO@O?B?GG@W?A@A?HG?IG@?IG?HGA?A@?P?GGP??OGO?O@AG?GGW?@GI?@GGI?@?X??H@A?H?GP?G?X?@@@O?O?W@?GAP?G@?GPHA?G?GJ?@?H?OH?I?G?G`?@?@GAH?I?@?GQ@@?@?IOGO?G?Hi????G?hG?G?@ABO@@??@CG?HGA@@G?P?A@P?@@?B?HGO@G@?W@G@GO@GB?G@GGOH?G@O@GI@?H?B@G@@A?H@OG?@GP?GGGO?HB?G?GGWG?GGO@GHAG?G@P?AG?P?H?W?H@AG@G?I?AG@OG@?CG?@HA?HG?GW@?IG?AGA?A@?P?GGW??OGO?O@?W?GJ???OI?A?@@O@?X??A?I?H?GP?G?QG?H?@B@G?O@??IP@@??IOGA@??OWG@G??WP?AG?@GWGH??GX?GOG?@QG@@??BGGI@?G@I@@@?GAH@OG@?@I?OG@?OO@P??H@OH@?@A@GI@?@GIGGG?GOAGOG??OB?GH?CO?G????p?G??@AKG@???GJGG??I?AGI?G@?IG@H?AGGGGW?GGP?GO?O@A?P??OAG?HGA?@HAG?@@P?@GGA?H@AG?@@P?A?@O?O?X??GAP?O??GPH?W??@J?A??GOH?IG??G`?@O??@CG?J??@@W?A?@OGG?QG?GH?OHGA?GAA@?GA?AHG?GB?@IG?GH?OI??GP?GX??GOA@O??I@GGW?@@@O?W?GOGGBG??OI?I??@OA?J??H?I?OG?B?O?`??A?B?AG?B@G?X??HGO?H@?P@?IG??OI?@G@AGG?BG?GHO?H@?OH?@P?@@I??O@AGG?IG?GHO?A@A@@?@B?@GI??H@FG???@?EG@???GPWO@??@CG@?O?P?OGB?@@?W?HGP?A??IH@?W@?HO?@GW?GG@AGG?J??HA?PG??IG@J?G?GGGQ?G?OO?`???@Q?HG??I@HGP??GI@@O?P?@GB?@O?OGGGOG?I?O?HGA@@?GP?@HA?@@GAG@?IG?@HA?A?GP?G?X??H?W?H?I@?G?`@?H?GAH@?P??HP??O@?OO@AG?@CG??H?GOO?GP??IO?@H?@BG?I@?@HO??OGOH??IG?GGW?@GI@?G?IG@@@O?A?IG?G?J?A?B??O?J?G?BG?H?I?A?GW?G?J?@G?W?H?J??G?`?@G?I?A?CG?@?AOHG?@A@GKOG????DHG???GPWOG???HX@@??PAGAG?@@B?H?@AGO?IG?H?W?H@?W?O?I@A?AG?AA@?A@?OGH?P??HOG?H@A@@?GW?@BG?@G@OA?@AG@?J?GH?@AH@?P??AP?@G@?OO@AG??IOGA??@BGGP???R?@O??B@?J@?@@@AHG?@A?OIG?G@?WB??GO@GCG??H?WB???I?HCG??H?BAG??I?AIG??@GBH??GO?AJ@??G?XGGG?P?HGOG@GAG@GGA@A?I?G@@B?@GGA@H?B@?G@W?AG?O?P?P??HAG?O@A?A?GW?@@P?@G@A?O?J??GAOGA??GCGGAG??G`@@G??@Q@AG??@SOG????DHH????BWOG???JGH@??OI@B???GJ?H??GWO?W?G@IG?G@GP@G?GP?HB?@?H?OP?G?W?HP?@@GAA@?@AG@B@?@GGHAG?@OGGJ??@GGOI??B?H?X??H?I?P??B?H?`??@GB?HG?B?A?WG?H?I@?O?W@G@B?@G@O?I?@OA?@P?A?W?@O?IGG?BG?HI??@H@H@?GP?@@I??O@O@G?@P@?@W?@@B?GG?IGG?HO?GGOOH??I@?PA?G@G@PG?GAGH@O??AI@@??GI@GB???OGW@?@?W@GI??@HP?@?@P?H?W?@@GP?G?IG@G@O?GGIG@?@GWGG@?P?OOG?AO@@@@?COG????DHG?G?ABI?G??GXG?G?GWHGOG?@I@@@@?WGG@P?@GOGGO?P?H@A@@GA@@GGO@GGB?GG@OGA?I?@H?B@@?@W?H@A?A?GP?@@B??O@O?H?IG?G@W?A?B?@G@P?G?CG?H?I?@GGW?@?J?@G?W?H?IG?G@W@G@@AA?I?G?@X?@?GGB@?I@??HI@@@?@PGGOG?AGP@@??I@OA@?@@I@@G?@PG@AG?@HP?A??@P@@P?@?OOGH?@A@H@O?GGB@@G@A?HGOG?@GP@@?GA@GHB??G@OGHG?P?GGWG?OA@@GGA?@AP??H?@B@@@A?GHO@?@@P?G@GA?HA?W?G?W@@O?a????G?EG??G@ABGO?G?@CG@?O?P?O@?W@@AG?A@B?A??I?OGP?G@?W?P@?AGG@W??HI?HG?@O@HAG?GG@PA?@?OGOW??@GOGO?GA@@@W??@OP@G??GPOP?@?@@OH?A?P@@O?GGHA@G?HA?HI?@GG@P@?HA?GHO?G@GP@??OA@H@?AG@B@?@H?OG@GAG?GWG?A?GOH?@B??GX??O?I?H?@W?@?Q?HG?@AO@OG?GHO?H@@GH?BG?@@W?@G@AH??PO?H@A?GOA@G@?I@@H?AG@@OG?OGP@@??W?PA@@@?@P@G@A?GOOG?GI?GH?GO@@I@?@?WGGG@O@?GWG@?HB?H?@?a????@?hG@??@?TG@?G??CH@G@??PHI?@??HOH?A?P@?I?G@OAG@@?GO@OO@G@?IG@GGA@@GOG?AOG?GH?P?GGP??HGW?H??WAG?W?@GB@@G?@P@@AG??IOGH??@OHGP???Q@?H?GA@@B@??@WGG@?GAGGHB??GGP?P??O@O?W@?GB?HG@?OH?WG?H?I@H??I?HB@??H?WH@?@A@@IG??HAG@G@?O@@QG??GGOHO?AG?HGOGH??P@@OG?@AA?H?GA@@?QG?@GGPGG?B??QG??AG?X?G?P?@Q@?@@?BH@?AG?AI@?@G?IGGGB?GGGW?A?GOAG?P?@GB??HGA?HGAG?GGa@?????p@?G??ACGOG??@AOH@??BH?IG??OI?@O??X@?GOG?PA?H@?B?O@O@?HB?@G@?WH?B@?A?IG@G?B?I?W??H?IAG?AO?GB??HO?W@?@AG?WO@?GGB?OG?P@@@O??OOP@??@OGOI?@@?GWH?GA@@HA??GHOGH??GPH?IG??J@?GO?A@H?P??AAG?H@?OH?IG??GX?@G@?OH?QG?@@A@@O?A?AGAG@@?B@GGGA@GI?G?GIG@@@A?A?IG?@?X?GG@O@G?OW?G@O@AG@G@G@B?A?GOGH?I@@?GW?H@A??P?W?@@AG@G@O?GHOG?G@P?H?@O?H?X??G@IGO?@A@@KO??G??A`G?@??AXO@???AX@G??AHHO???POGGG?@PH?IG??JG?@G@AHG?GO?IAG@?G?WB?GA?GGCG??OGAHG??WGGJ??H?GOH?GP?@@I@?H?@P@G?P?@OW?@G?BAG?B?@@I?GH?GPG?GP?HI??@H?PG?GAG?OW??HGAH?@?P?AI??@H?PG?GOG?KG??GA?PG?I?G@J??@@GOHG?@AH?OP??@I?GP??OH@AG?GGI?B?@?P@?J??AGO?P??IH?BG?@HO?A?GAH??X??GJ??O@A@G?J??@AO?H?GOH?@P?@?X?@@GA@G?IG?@AO?GGGAH?@GW?@HAGA??OOA?B??HGa????@?Z????W?`?B??G?X?A@?OGO?W?H?GW?H@A?HG@P?G@P?@OA?@A?AG@@AG?@HA?GGGsIvNkP`P`QfOaQbPwOtRsMnQ`RqOjRfQxOpQqShQwPoRjSsIoSbSmSvRcSfJ|SbLrJ`K`NmL`SzJoKpKcLiLlLgMlNiOhPaJgJkJgKnKtK{KpLtL`MhMuMyNaOrO|O|PvQ}QkRiS|I~I_J`JbJdJeJiJlJmJnJoJpJqJsJvJwJxJyJ{J~J_KaKeKfKjKkKlKmKsKuKvKxKyKzK}K~K_L`LeLfLhLkLrLsLvLwLyL{L|L}L~LbMdMfMiMkMlMmMnMpMqMrMtMwMxMyMzM{M|M}M~M_NaNcNdNfNgNhNjNkNmNoNqNrNtNwN{N|N}N_ObOcOeOgOhOkOlOnOoOsOtOuOvOyO{O~O_PaPcPePfPgPiPjPlPnPoPpPqPsPtPuPvPxPzP{P~P_QbQcQdQeQgQiQkQlQoQqQsQtQuQxQyQ{Q|Q~Q_RaRcReRfRhRiRmRpRrRsRuRwRyR{R}R~RaSdSfShSkSlSnSpSrStSuSvSxSySzS{S}S_T`TaTbTdTtIuIvIwIxIyIzI{I}IcJhJjJtJuJ|J}JbKcKdKhKiKqKrKwK|KaLdLgLjLnLoLqLuLxLzL_MaMcMeMjMoMvMbNeNiNnNpNsNuNxNzN~N`OdOjOmOpOzO}OdPmPrPyP}PjQmQrQwQzQbRdRgRlRnRqRxRzR|R_SeSgSsSwS~ScTeTfTorGUUUUU[U[_@U]UUU^UU[[h@_@U[[U[UkBU[_@UUUU[^^U?[U?HU?U[j@UoBzCUUi@U|BCi@[h@K_@UU[h@H]?FdDUC[UU]AA??^UCN`@AUoC_@UUUU[A@?C^UB?UF??}DE@@]@]UNi@UMDB?Cl@@EEUR??AFHCNHU[A?EBDUFMFUBHj@M]AE?AAHE[d@IHU[?CAj@CMUNFCDd@HRN`@M@??UUUDELC@_AFNURO??NAOKHUEKJ{EMKUEMEGOC@AIKFbD@?CGMC@A?H?U@RIC`@@RD?NAROUG@CRc@UJMJDB]YDA@OLHB@UJN@H?@?MUUNC??C??SU_A???AOKBISJAKGEBB?~EAUAF@@CKNLM`Ed@MEYCC@GENAK?YDQ?UDHOYJ?ITl@JELB?T?C?DQMG@@QFAUJRENAIRJABRAT@J@@A`@??BKN??GJLBKXLEZ@TG@LTAIKNU@?NJKBADC?GS?GMBZLXJ?IFMJPMB@GB?FA@RDRC@TBJGCIPTO?VY?LSWQV??BAWDOCFLWZ??FJC@WMOKX???AFGDKRTWH@DYH?SW?D?C@CPDJDICCAHH?ITJN?@XG?LAAD?@RMMKDSFWE?TLASLRILIJMPPBCXNJA?RR?ICGADMCI?LPZXH?JPWIWMMOHNWN?CGDJCYLE?BVLBVXC@BHA@@AGQKEMADJ?EGYGKGKECCPDD?SQQ?HJWDBD?CBFADJ?@XAAEQXJDIKZB?DLPPJLRSIMG@NDSE@VLBNAEEFRTDDBCNNABDH?QFD@A@T@@KMWQMDPLBO@AVJECAB?DVEB@KSGP?IP?BPJ??FIJCIWODEHVN?CIOJ@@XT@Q?BG@IDYB?@QPWN?T@QC?AFQGDEH@CDATBLCDS??ZNGHDC@OA?GWC?IOEGLNGAHMS??DHAXZH?D?CDEJPP@?SDD@ONNJ@BJVJEEZAA?OVWD?FSNP@@DTDQ?AAAKCATJPIIIIMTSDC@EB?S?ABHB?ZJAFJ??HEW?CWX???FWKBAFIKHJLFAW?O?DJGLQLE?TAXBFPEKVINC@?A@DTBEFJA@XFI@@DC@TB@SDHVQKQXB@UACE@FPCARF?AFYJCQRAAMDE?H?NATI?AOEEDZMETBMASB@T@FLNV??J??DN?IKTGFPRO@DITPHQ@IOGMJLBXHEVPRI?DS?A?C?@DAPEOA??LSDQKG?CE?TIA??EZNOKTQHLBNLBNAHTBB??ALBALLGSE@OGJHD??CNKGGBBEB?XG@RKQFDSDAM????DDJFDE@HMTIMSQ?DDBEOGVMTQHFPKNGL????TWH?L?QJGSA???MIJSACZB???YPMPIBIIMIYJPL?B??NKAIOBQSGW@CIFQDWBQK@MPFLDMIGDCCJFLNLJ???GCDAMC@NARXRC@@IPB?AONEEKJWRIGL?@FAL?PD@QGMMEGGCRFT?B?ARCTGHG?E?OFYKBD?G???GFTG?F@FIVN?OKM?FJPAWH@B?@QGJABEMIOSA?EH??AOQGO?@QVVLQKELAEEVFBPDICDEHPHXH?@NPHC@A?FMALLH?GMGEEEASFQLVGB?M@G@FP?EDNKBPLBA@GB?@TMJP?EKGSFDFKEH?A??NFOKBPOAKBGMSKHLTAFLFIG?CJKIAG?N?FQQ?DBBAKJEB@IXASCK?WWMAE?BRFZPABKBGVKJFQLK?PQMT?AC@K@SPY?MIDSIVKJb@RIIDOMATQLO?IAGPDKC??@CXGDPCRQ??GVQOOOBHDAXGE?KE?CAASCEC?FMJZF?CEHFPAVTC?RRHFSWD?I@H?VP?B?@F@JPAGL@@R?LDAAHCH?FFAPHIR?F@VASYC@EHKHNDSE@I@RAAHKB@C?TNGDOFLLO?DSA?E?E@QVGIKKMLFZNAWEOEB?OXATEHOOC@DGROLIFCNWDNL?LB??NASB@?DSQJBKHOGL@H?JMLGGQCAVPPOHKEFBJDNCMMEIIJX?IFF@OAZYGF@EE@IGVPLRFBEWGOC@CB?PJGA?KIFBODVYKCKHBBXTHC@CEZ?HGBCVDCFl@GDLG?EE??DGWR?@BHXA??CQEMSJP?DO?CCEZQKXH?OEA@SC@KOAJNER?BFQGAOQFQKZIDRPOIOKQDDVX@@K?C?PJBHC@MKGWZ@EBZPAHJ?CC?RJCFMALYQKQLZWJN@LI@H?NZCBQ?MLDDSTFEBHKMZGJb@CI?BC@AD@@@M?TERFNKM@JNKFT??XBTCRCV@XTGB?QYDDQTCBHCRP@NGMO@?OLDW?FFBR?GGPXOLKEK?APAWLC?CEHJJFFL@@CTAAT?LIOCQSNAARBQME?AA?BBIM?PVYAH???HFJANA?HK@?CJGB??E?EJGVNLREB?RAJSXFBRFQLJSK?CC?FPDSGF@LEK@DAXJK?BQFLGPFLE@@RNGVP@F??I@NGWPILIFFQAZEEH??KDNDA?@B?MIAGDNHBL??CAYI???@?XZAP???C@CDVTD?KE?@FNVHFLKK?SJNNFFIO??YDAS??BBCCPN@C@@HWCLETE?RB?PQPLJJIFILMLGTKB@BVIIFA?LVIOGCAOLITKT@@ABLVDTFWC???EYKRRDO?@JPO?NE?BWMA??A?INPX?IPDN?KSH??JNH?OO?TAAELA??BDXH??MLNDDJRLBE@KYXGW@CCM??AZKMK?@P@??P?@?@c@V?P@@KPD??EVF?TGIC?GWDKJ?@@?@AQVY@FHH@FGAQKECIBZYDOJRCCCCDWQMA@FLNNCWB???KZCKBA?HHATRXIEHBMJ?@QJ@MEDS@@ALB@AX?CIS@ISSUQ@P@QGGR??CMAFQMDBRC@\V?GCRCQADDJ??@MASG@HMK?FXD??TEKFPDONBFQ@BYM??W?\QFQTHA?CKGEPNA@KEYAALA@EHBCYLTAHE?Rc@WBA?@@HCGOSZQ?OEDJ@GQEHEKDCAAK??IMJFSRH?FKX?DSO?CQIPRXI`@IMXJBOEQLV?B?ACHMDDQ?JFLHJEPHCN?Y@FEEGPAA@?EA@RGGLC@I@MXGA??WC@EVDEH??NHSAEKKK??DTHHHKBBTTD@A@IOECJKB?PQIEZXMIDH?CYBAAA@BHWZAIWHME??ZLASQIL@VJ@N@B?FQU@DSQBKFDDOWBKB@QGFASQM?C?CGAE?CII@ATG@VFME?CPDBH@WH@MEGRHWDDC@A@C?PPIOKD@QPNE?@PGSQNBH?OOZ?AT?R@B@FNAFQMMLBVSP@NFFM?LDE??DR?BDDQLZ@@QANCC?@IPGG?D?C@@MACPY@??EAABN@QL?FD?C@V?KHGPMIDE?BTOZAA@E?VBHNAIROE@ESGSMAF??BLAHNJB?O?PY@DKRO?CT?MOGMQKGPRSF??EFN@@TFI?QWDHP@?CR?JKIJR\PFLBSAL?CRMXBB?ACLBWGRKAKBKDBFGSI?@NB?XSKCR@FNRTTHI@CPDBDM@@?ISIGA?IMBPVBZO??M@A@AALCKHSDQT?RFFEDODNO@BMATMA@C\?BD??CAH?CJT?CAOLCVXMB@LZODNE@LEGPA?IKHF?AVQFIZHEGP?FQNSGIV@LL??SHRFJ?ELAACCJH?@SCGWJIQOWSVMJOMO?OZ?PDMCF?TP@S?@@KEA@GPLKBKDGHP?FM?MPFAAMB@MDJ?NFMQF@D@WPLCQEAABAQFFE?S?SY@IRIASBVBC@RLVMTGK?EQAXQJBB?@EXA??D?FLJGQOJLBMJT??CGEEDJ?CBGHHJPE?CBL?GDN?BT??OGIDKHVKCAOLTLVRI@Y?NTGCOLSOKNGL???@@AAWKW???KHP?FLS?BMVA@A@IPHJCIIFOO@W?CGYK??L@Z?DJ@@B@NGNB???M?JXDS?@F?DTYFQHH?@DTH?G?@@JTCBVLBFJABEF@VBAXH@BCPDYF??CBBGALLVILCWPBBAIILASB??HLADN?OA@FQJA?????AAW@BJMKHATHCLIMXDJL?AFM?ANMKK?BYJPIZ?KBBOMASTEPQ@FREXFGWBEMRAG@DIB?I@X@JD?@R?YNOAF??MQAEDJFBIQAG?PBQIODF?ASOHCGLBJA@FLOOLDNSLAMC@?KNBPW@LM@NAFACLBESF@AGKIMYMEVVE?C?MHVGV@PFQL@KSHNALB??ANEN@EHCFV?PTCIMWC@ATOH??@?PPTELNEBOPGIFE?LAPJ?@N??RGALE?@KJPY@BPC@EANBHMIQAJAB@TOEODVC@B?LAJTH?TBPPIII?MKIJA?A@IDAGOCXEBKAAHCRKRNGGKCHDPNCTI?CCAEMC@PH?GBBA@AFIFHSNXDHO?CPN@CyF??CDAOOFBHXAA?CAC@QTSFMQEFJGWC?V@FQWP??BF@AAA@MTC@HWDFM?E@ADS@@V@F@JAIOIBOJANHO?ARIJA@KH?QS@TABK@?DNLSMH?@CA@DSKM@IXD?DCFQIKX?JJQI?OGDBAQBBCMWRDSKB?CJDKWHKEC?DMAT@II?GA?J?KL@DFRSJF@ONIOGD@??CF?NGWKENLERJARIC?LGDJ?RA??ENWC@ILFNNAEOAQMOATKKF@CGAY?LS???VD@F@?BAATEKV?HLW?ZFFP?LDNDB@AKE?ZGB??IHVYNELZBHEDP??OB?JAW?BW??BPOAKBPE?AFLACG?CRY@HR\PJPIIOS?CDYI@QJTA@XE?CRMJB@RA?I@@FAEDBB?A?DKHDKBIGSHS?B?FQZRNAOECOAAQVKEBC@SEJP?FEFPSZOCIMK?VDCIA?RBDAC@DKH?SAC@BELGDYCMSEE?JGIO?KQGDNC?IJXDEGOB?FP?FPXB@?FATEGBC@CLJMAABQKEJDFGLEHLJ@QDTQHBDH?AV@?C??BANGBHAQR?XY@EFIBGJGKODOE@GA@@HEONWGK@AC@@DVQLHKLDTG@?Z@@@AFZLBS@KWPT?HDQLQABP?CGC@WIFGEGLE?A@NB?VI?T??GHXOKEGCA@FVB@AEHS@X@F?QAPIMSMR?PT@WMIM?CABAAMHLKVYEDKBHKHNRAVB??KAS@AC???BD\DTFHEBGAZC?MBC?JTEBJH??AAFFJ@QBGABHF??ARJ\IRZDS?CAYJ?@HGNABCN@FIJAC@@O?JATCIF@DSCDCIMKA@RJAEB?N@QPNLLE?OKDZJF?TC@MJDLBKEFPTYE?GRFRGT?HMB?DAAF@YEBCAJLBHK?NJPKIXQKEGBV@QAM?GGGBRACCMPJ@F@CCWAGK@PC@?PKEVDQ@?YIOWA@QLCQ@PVPCFVCRBDQS@RJ??XNAC?AKBBAGMBOFACAA?I@?PACALC@OQWFAJCBLQJDMN?OKO@N@TG?EB?WZ@PMFMC?JKANO?QFSDIJR??OKPEJNL@QCTN?XKH?@OD?YDBKM@JANRQB?FDFQTAC??G??DA@LLORHGATL?PLB\NW??MIFGDSE?G?C@PA@RK??TNG?FNH??DABB@HHNNARMDROQPPRRFCKAGAOHWFQLADLBLO?AGPKQDIPIBCJ?b@BTOCFMYWWJ?L?EAGCZ@R@@DOHOLTF?GSX?CWLBHW@DXG?FOGHCAZ?OOEIFGAALFNC@?TP@FR?MGPYEHBPDT?N?@@EJBBJN???S??PAORFOL?SWNQY?OEBZI?GWKLEVQLGWR??@HG?@FVFK?JAB@X?C@AWH?FIKJSDE?PEHESJFLECKGAZBQGOLMPP????ITDSOON??OWP@@MO@JZD?CGBBMSOYC@XFFJPJ??JME?VSC@LEEWAACRWLK?APFMQ?FADPEQSBHRDLENNBQ?XEHXJEMQLBEXJDQ?NB?BGTQKBLOJNACMA@REJG@?@FCZWWBBVCCIVWLBRMCJSW??SC@MWDMEE@?NXJO@A@QLANBCHLIGAGCEXMBIZYEHO?EYWXR?G??FAKAQKAH?JVT??PIIIPPB?CSRYHI??SPPAMLO?XJLGB?CMAC???DEFPDSKOTIIBAQNQLDECYH?V@A??M?APTACEBLWG@@SRFEWP???ILYVGM?D@FCJSQKK??PPD?KYHCMDD??K?@XGPRRNCCRJLVEBNLHGSDELNEBFXTC@I?BDJAO@GB?RN?S@FA@BWQL?GG@\@NF?DNFMBFPJJLROECQXPAAIF@?ASBG?@@?KNIDJ??@?TTITE@@ELY?VJOE?@NNJ?@OLMCWYOKD@M?APKQPQMBJP??LF?NAWFLFZ??NGFC@MET@JP?OMKZA@SKIIH?G@XDB@EMSARNBKB?GBRDSR\RP@QGGMBHE@CYNPK?PLBCAJB?IFFVYJBMD?HCNGLLO@HYASC?JQK@WCNC@VKQDGA@?DIOMSRDE?J@CSLBG?DIMCV@AILIPJC@RJE@DLB@JGDJB?H@JN?YLMKEJOL@RA?MD?EABA@@HCPAKEDB?EAS@EZ??IGKNJAEM@PVAEALFMQLW?NJQIBOGSKNFEHCFNENJ?M?EXD?W@??MIVHAGFIFLDJ?GEQMQHDHAWCHIKVDIDQIIF@VMGP?@MMDN@Y?H?IFJQYD?HFRWDOSK?C@LAODN?LK?VPFJ?BHKQA@AGOC@FVYRWCHB@YBRAS@RMYFMXT?@@FHRPAA?@N@FBVX?CQCFVASRBVRO@JGMBMMFTATM@AC@@ASC@OQEVDT??@DPWCVRH?EV?RVP@CKAOQSW@LBO?IWSGKONME@ZA?CC?KJGNE?D???PNE?E?BAWDO@N@RFNZFLOC@ZJNBKN@FOAN?BQ??NVS?@SE?HZ?TB?AQOGNS?KJMELJV@FELIDRPLGVIIIAYKIO?BXC?CNCBEDJF?D??LVFAKBYBRANA@?YFIEAKJDJ?QMNR@NNBFMEISIAGK??OXXCNROO?CJOTABOKEAAKVIOLIY?KSDHE?NOENGBCCRRKYDZ?MABH@TA@@FIBGGAE@GRFIDVC@?LCGJDRCGC@BDXRIHFBGGG?RA@@EAAC@KIRGASQHD??BVRT??DIBAVDEIA?CQTJLBBFKWNJOHW???ABZBBG?HD@RTRAFR?W@XEEABFA@RWBD@RBVIP@RGOCGRIDEAKEIFPNHBT??FJA?VCBH@FZRSXOBEMJPTFI??F@DAB?A@C@GSQMT@R?JN??OK?DAAOCFDND@VR@FQGFBYGQHHDKBVX@H???OAVT?SMBHFQDFJPCFHQVGIBJLBQNP??IC?DUVIQEWGV@W?MKBX??LLIP\WGAW@H??FWBGNACE@AWGCDEMECG@@@RDFOT?CGEVB?EHXNASBR??SVKS@LBFHAQWD?H?@ATOY@@CFOWHTA??CBGAAML@F?MNPRFGHBFDSQEV?O?AZH?FCODAS?@AFL?AFYWDEBBW?CDNBFMHEQGGAL??ZJPLXHEH??JRDNOLO?NAVR?@Q@?AG??N?@MAAKQDME?GACRHBAKJJC?@?EHPAKB?HBFJTT?@SB?RAACCC??DAAFLNH?MGSEH?MHYAAC?X?CBNRODN@@FDIFATK??OOOTNXQBP?HRAW??C?@JDDKHDHC?DBNRRPEEGTAQPQ?CE@GQSPOE??SWBAFIMEQGCPV?EK?JJTCFIO@CTGFIJI??AGB?AKE?PG??MC@VPG?KD???GJ@QK?KAPN??PRI?GKJVP@@KSRPTTIIIMGQMTDLKKXNAEAC????ALAA??CBKEAAF@@@QOWAN?RIVGXINIC@@HAOWX@IHIVWGHQ@FECAX@FGMIBDSBKPIO@GP??CC?TVDR?NIF?GMD@QDE?XC@N@NRFFS@TMEDQLAEBDFD??I@DD@RDE??VP?KWLBOZS??O@MGAGBIAEBEDWC@??BGAPMK?JIFDTFBHMLFVPJBDQ??@IXCDJK@@FJACVIOOQFVLDTB?@?TNNER@@??SJFMAECEANRIDB?LWAMEOFOTVSQBFZ@RPVCOKQHD@H?DORMXG?BSELBVV\I@M?GGVEHWIOBGQS?CJ@@SVJLQA???NGFM?MCANP?BSEH@NRD??ZO?D??HDNKBMJCBJABB?OWNGBQKB?LYV??T?EENNE?ZB?@AAROH?MVDNF?A?CLAAIJRJ\KB?NHO?JN@GKEHL?ACVG?O?MDDT@LOLM?SSQQA??IXXCJK@?E?GEJGEB?@SXBSO@@MLW?DSOEHBZXNHHQ@QDCVEBW@QAB?YCDEH?HGNVYB?OCNXALEC@HLNBASEL?MDX?GLOEF?NRAXILLAHCGYO@RFQ@JDXFIHASW?TB??HD?MATB@CW??WJL???EEXZA@JCHC?ZB@WZ?ICAEEAAOEBOLCGWDMFJHCKPJEBCMFSAAOCP@FOWTBH@QLGDT?ROA?CGSO@@EKMGASGCCKHIMAP?CJ@C@ZDBCAB?MAS@QL??b@XNB@A?CMJVIMI?ESWJHHCV@FAWHMEELEJZXBW?ME?S??GVCM?ABHPTQH?@QQAVWKEPRR?PSQLOI@DZJBKALBFAACI@?@VAWH@SOLEVEX??G@@GWT?MTPPIICIO@FB?NGAQWCLB?VFQJT@?RNFQAN?B?@K@PSDNBBFM?D?GFQSHFNRFNON??@@DDAA?@FFNA@AE@FHCJLPD?FICWGHWKI@E?W?XJI\BGH?WJQ??IEHJYDFBSKE?ALGHCWR?DB?VCGMB?HYVBHYMFJ@RQXDC@@NFOPDOMKAHHDTCRI@EOJJN?EVFLOAWFQBKBGSJQ?Z??KWXROCR?NDJECARICGTC?B@@GANFFXBHCDGIO@EQVJABJBKBQNFHWSC?RSMESAEEK@KOTGGBT@IOEEJQDSRHBIVGIABIFEEXFDNO@@S??STRC@CE?TVYCBAMKHJP???FKYTN?MSCRBTY??@@BXAWQODHCKNDRO?@?GAWL@S??HXGQLHI?NAA?BPFQ?JLYHCTBBANGCABKHCEVIDNB@QLJVIIZIIMXD??MMCAASCC?H??XV@??H?DQSGBFBOZDEXICIMABMAAC?OPEHNPOOK??FAZZ?HAHHOYGCRBCBZASLLTUAUBUCUDUEUFUGUHUIUJUKULUMUNUOUPUQURUSbAJcALeANUTUUUVUWUXUYUZU[U\n@]U^U_@U`@Ua@Ub@Uc@Ud@Ue@Uf@Ug@Uh@Ui@oA\n@KdAMm@To@j@Uk@Ul@uAf@Um@Un@Uo@Up@Uq@Ur@Us@Ut@p@m@Uu@Uv@Uw@Ux@Uy@xALiATo@VkAXmAZaBMm@z@U{@U|@U}@U~@U_AU`As@NfAaAUbAf@TbBcAUdAe@u@UeAUfAUgAf@OUaAiB`AjBUjAWlAYnA[t@VcBYnB\g@hAUiAf@z@eB|@gB~@UjAUkAa@PgARa@aAUlAp@g@vAi@s@mAUnAhBjAtBSv@bAt@j@yAl@e@oA_Bx@`BSa@pAUqAUrAUsAUtAw@`Au@cAUuAUvAUwAUxAUyAUzAU{AU|AU}AU~AU_BU`BqB{@fB}@xBkAu@WmBZwBnAlCSg@v@{BaBUbBUcBq@`Aa@dBUeByBk@zAStCl@vBh@wA[mCXdB[uCSpCw@r@y@pA^UfBUgBUhBg@eAlBgAy@fByChBnC~@sBkAzBw@r@aBqCcBaCdAwCY|CgBx@iBUjBUkB}BqA~BsA`CSkC|@rBjAsCeBxCx@z@jAfDkA{CfA`DZgDSpBiAcDrA_CtAv@lA~Cx@UaB_Ds@jDsAhDgAmDtAkDgAx@vAbCxAdCzAfC|AhC~AjC`Bz@_AiD[tD\oDwAcCyAeC{AgC}AiC_BuBQhASeD}@vCi@|@aBlD`AaDhBe@n@{Ap@}Ar@q@t@zD~@}CSyDR{D[w@SbE\{@aBcEbBrCs@}@_AnDS}@jAfE`AuDxApD{AwD~Ak@lBUmBsD`AgEkAkES|DbBeE`AlEcBmEs@|@y@~Do@|Aq@~As@k@nBUoBUpBUqBUrB{@y@dEcBtES~@p@_Es@hEyAvD|ArD_B~@sBUtBUuBUvBaESyEtBzEvBqEoBrEqBnE`AwEzAqD}AxD`B`AuBoESk@jB`FkB}E{AiE_BvEq@pEt@y@_@qAa@sAc@cF`@rAb@tAd@uEs@_FvBjEmB|EpBsErBaF|AxE`BgFqBhF}AfF`AbFr@jFs@iFrBaA~AkFt@lF_BmF`BeFa@dFd@nFb@aAwB`AxBUyBUzBU{BU|BoFc@uFd@qFyBrF{BtFc@pF_BxF`BvFzBsF|BzF{BwFd@{F|B?}B</div>
<div id="globalStacks" style="display:none"></div>
<div id="methods" style="display:none">@??A??B?????B??C??@W??F?D??E??P??gH?F??G??P??s@?F??G??@A?OB?H??G??PI?[W?H??I??PL?cY?J??G??@?????K??A??A?????L??C??pA?Cs?M??C??P@?kf?N??O??@V??F@P??C??@B????Q??R??p??GB?S??T??PG?GC?U??T??pA????V??W??pF?GC?X??Y??PA?{y@X??Y??@?????Z??A??A?????U??T??`B????[??\??@W?GN?[??]??pA?gO?^??_??@B?WH?^??_??PG?OI?`??_??pE?WQ?a??_??pC?[D?b??c??@??_X?d??A??A?????N??O??`E?GE@N??e??pc?WA@f??g??PB??Z?h??i??@@?OV?j??i??pD?CI?k??l??PD?wz?k??m??`u?[j?n??A??A?????o??C??pS?WC?^??p??@U?wL?[??q??@F?WC?^??r??@A??G?a??r??pC?CF?[??]??`??cO?s??t??`N?CJ?u??v??`@?GA?[??q??PJ?sC?[??w??@A@sK?[??x??PD??H?Q??T??p@??B?y??z??p@????{??|??P?????}??~??@B?__??@?A??A?????[??w??Pf?cJ?[??@@?`L?sL?A@?r??@A?SG?A@?r??`C?gG?A@?B@?P??sJ?U??T??@A????C@?D@?`???J?C@?E@?`N?GG?F@?G@?`@?SfAF@?G@?PI?ShAH@?I@?p@?Co?F@?A??A?????V??W??pM?WC?s??v??PF?_D?^??_??P??WH?`??A??A?????[??@@?@T?wL?C@?v??@O?[D?J@?A??A?????[??@@?pM?wL?C@?A??A?????H@?I@?@C?Co?K@?L@?PI?wmBs??v??pA?WD?S??T??pB?wB?C@?M@?@C?SF?[??w??@o?oJ?V??W??@F?GC?F@?N@?PD?[n@F@?O@?`A?cr?F@?P@?@E?CN@K@?Q@?P??C\Bo??C??@M?KC?R@?S@?@A?cE?T@?S@?P@?GH?T@?U@?`I?CG?V@?W@?pr?kG?V@?X@?`d?OM?T@?Y@?PY?KR?Z@?[@?@A?sL?\@?]@?PA?Ge?\@?^@?@M?Sf?\@?_@?@??su@`@?A??A?????A@?B@?`E??K?a@?b@?@D????c@?|??@A????V??W??@L?WC?s??A??A?????f??g??pE?KZ?d@?e@?`B?gc@f@?A??A?????R@?S@?@N?KF?R@?g@?@S?[H?h@?A??A?????R@?g@?@A?sG?i@?A??A?????R@?g@?pB?{G?j@?k@?@@?CU?Z@?k@?p@?wI?l@?k@?@??[|?m@?A??A?????Q??T??@B??B?N??n@?PN?sS@f??o@?`F?cX?p@?A??A?????\@?^@?@e??g?f??o@?`^?[Y?f??q@?`@?{I?h??r@?@@?GS?j??r@?PA?cH?k??m??pB?gy?</div>
<span style="position:fixed; bottom: 0; right:0; padding: 2px 4px; background-color: #ffffe0; border-top: 1px solid #ffc000; border-left: 1px solid #ffc000; border-top-left-radius: 4px;"><span id="produced">Produced by <a href='https://github.com/jvm-profiling-tools/async-profiler'>async-profiler</a>&nbsp;</span><span id='match' style="display: none">Matched: <span id='matchval'></span>&nbsp;<span id='reset' title='Clear'>&#x274c;</span></span></span>

<h1 id="title">Heatmap, ALLOC</h1>

<canvas id='canvas'></canvas>
<div id='hl'><span></span></div>

<span id='status' style="position:fixed; bottom: 0; left:0; padding: 2px 4px; background-color: #ffffe0; border-top: 1px solid #ffc000; border-right: 1px solid #ffc000; border-top-right-radius: 4px; display: none">&nbsp;</span>
<script>
	// Copyright 2020 Andrei Pangin
	// Licensed under the Apache License, Version 2.0.
	'use strict';
	let root, rootLevel, px, pattern;
	let reverse = true;
	const levels = Array(0);
	for (let h = 0; h < levels.length; h++) {
		levels[h] = [];
	}

	const canvas = document.getElementById('canvas');
	let c = canvas.getContext('2d');
	const hl = document.getElementById('hl');
	const status = document.getElementById('status');

	const canvasWidth = canvas.offsetWidth;
	let canvasHeight = canvas.offsetHeight;
	canvas.style.width = canvasWidth + 'px';
	canvas.width = canvasWidth * (devicePixelRatio || 1);
	canvas.height = canvasHeight * (devicePixelRatio || 1);
	if (devicePixelRatio) c.scale(devicePixelRatio, devicePixelRatio);
	c.font = document.body.style.font;

    const search = typeof searchIterative === 'function' ? searchIterative : searchSimple;
    const init = typeof renderHeatmap === 'function' ? renderHeatmap : render;

	const palette = [
		[0xb2e1b2, 20, 20, 20],
		[0x50e150, 30, 30, 30],
		[0x50cccc, 30, 30, 30],
		[0xe15a5a, 30, 40, 40],
		[0xc8c83c, 30, 30, 10],
		[0xe17d00, 30, 30,  0],
		[0xcce880, 20, 20, 20],
	];

	function getColor(p) {
		const v = Math.random();
		return '#' + (p[0] + ((p[1] * v) << 16 | (p[2] * v) << 8 | (p[3] * v))).toString(16);
	}

	function f(level, left, width, type, title, inln, c1, int) {
		levels[level].push({left: left, width: width, color: getColor(palette[type]), title: title,
			details: (int ? ', int=' + int : '') + (c1 ? ', c1=' + c1 : '') + (inln ? ', inln=' + inln : '')
		});
	}

	function samples(n) {
		return n === 1 ? '1 sample' : n.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',') + ' samples';
	}

	function pct(a, b) {
		return a >= b ? '100' : (100 * a / b).toFixed(2);
	}

	function findFrame(frames, x) {
		let left = 0;
		let right = frames.length - 1;

		while (left <= right) {
			const mid = (left + right) >>> 1;
			const f = frames[mid];

			if (f.left > x) {
				right = mid - 1;
			} else if (f.left + f.width <= x) {
				left = mid + 1;
			} else {
				return f;
			}
		}

		if (frames[left] && (frames[left].left - x) * px < 0.5) return frames[left];
		if (frames[right] && (x - (frames[right].left + frames[right].width)) * px < 0.5) return frames[right];

		return null;
	}

    const marked = [];

    function render(newRoot, newLevel, minLevel) {
        minLevel = minLevel || 0;
        if (root && minLevel === 0) {
			c.fillStyle = '#ffffff';
			c.fillRect(0, 0, canvasWidth, canvasHeight);
		}

		root = newRoot || levels[0][0];
		rootLevel = newLevel || 0;
		px = canvasWidth / root.width;

		const x0 = root.left;
		const x1 = x0 + root.width;

		if (minLevel === 0) {
		    marked.length = 0;
        }

		function mark(f) {
			return marked[f.left] >= f.width || (marked[f.left] = f.width);
		}

		function totalMarked() {
			let total = 0;
			let left = 0;
			Object.keys(marked).sort(function(a, b) { return a - b; }).forEach(function(x) {
				if (+x >= left) {
					total += marked[x];
					left = +x + marked[x];
				}
			});
			return total;
		}

		function drawFrame(f, y, alpha) {
			if (f.left < x1 && f.left + f.width > x0) {
                let match = pattern && pattern.test(f.title) && mark(f);
                const fw = f.width * px;
                if (fw < 0.1) {
                    return;
                }
                c.fillStyle = match ? '#ee00ee' : f.color;
				c.fillRect((f.left - x0) * px, y, fw, 15);

				if (fw >= 21) {
					const chars = Math.floor(fw / 7);
					const title = f.title.length <= chars ? f.title : f.title.substring(0, chars - 2) + '..';
					c.fillStyle = '#000000';
					c.fillText(title, Math.max(f.left - x0, 0) * px + 3, y + 12, fw - 6);
				}

				if (alpha) {
					c.fillStyle = 'rgba(255, 255, 255, 0.5)';
					c.fillRect((f.left - x0) * px, y, fw, 15);
				}
			}
		}

		for (let h = minLevel; h < levels.length; h++) {
			const y = reverse ? h * 16 : canvasHeight - (h + 1) * 16;
			const frames = levels[h];
			for (let i = 0; i < frames.length; i++) {
				drawFrame(frames[i], y, h < rootLevel);
			}
		}

		return totalMarked();
	}

	canvas.onmousemove = function() {
		const h = Math.floor((reverse ? event.offsetY : (canvasHeight - event.offsetY)) / 16);
		if (h >= 0 && h < levels.length) {
			const f = findFrame(levels[h], event.offsetX / px + root.left);
			if (f) {
				hl.style.left = (Math.max(f.left - root.left, 0) * px + canvas.offsetLeft) + 'px';
				hl.style.width = (Math.min(f.width, root.width) * px) + 'px';
				hl.style.top = ((reverse ? h * 16 : canvasHeight - (h + 1) * 16) + canvas.offsetTop) + 'px';
				hl.firstChild.textContent = f.title;
				hl.style.display = 'block';
				let details = f.details || '';
				canvas.title = f.title + '\n(' + samples(f.width) + details + ', ' + pct(f.width, levels[0][0].width) + '%)';
				canvas.style.cursor = 'pointer';
				canvas.onclick = function() {
					if (f !== root) {
						render(f, h);
						canvas.onmousemove();
					}
				};
				status.textContent = 'Function: ' + canvas.title;
                status.style.display = 'inline';
				return;
			}
		}
		canvas.onmouseout();
	}

	canvas.onmouseout = function() {
		hl.style.display = 'none';
		status.textContent = '\xa0';
        status.style.display = 'none';
		canvas.title = '';
		canvas.style.cursor = '';
		canvas.onclick = '';
	}

    window.onkeydown = function() {
        if (event.ctrlKey && event.keyCode === 70) {
            event.preventDefault();
            search(true);
        } else if (event.keyCode === 27) {
            search(false);
        }
    }

    document.getElementById('reset').onclick = function() {
        search(false);
    }



    class DataBuffer {
        data;
        pos = 0;
        constructor(encodedData) {
            this.data = encodedData;
        }

        nextVarInt() {
            let res = 0;
            let shift = 0;
            let b;
            do {
                b = this.byteAt(this.pos++);
                res |= (b & 0x1F) << shift
                shift += 5;
            } while (b >= 0x20)
            return res;
        }

        byteAt(pos) {
            return this.data.charCodeAt(pos) - 63;
        }

        int30(pos) {
            return (this.byteAt(pos++) << 0)
                | (this.byteAt(pos++) << 6)
                | (this.byteAt(pos++) << 12)
                | (this.byteAt(pos++) << 18)
                | (this.byteAt(pos) << 24);
        }

        int36(pos) {
            return (this.byteAt(pos++) << 0)
                | (this.byteAt(pos++) << 6)
                | (this.byteAt(pos++) << 12)
                | (this.byteAt(pos++) << 18)
                | (this.byteAt(pos++) << 24)
                | (this.byteAt(pos++) << 30);
        }

        varInt(pos) {
            let res = 0;
            let shift = 0;
            let b;
            do {
                b = this.byteAt(pos++);
                res |= (b & 0x1F) << shift
                shift += 5;
            } while (b >= 0x20)
            return res;
        }

    }

    class HeatmapCollection extends DataBuffer {

        maxZoom;
        blocks;
        zoomToCounts;
        zoomToMaxes;
        zoom;

        constructor(encodedData) {
            super(encodedData);

            this.maxZoom = this.nextVarInt();   // fixme
            this.maxZoom = 3;

            const startMethodsCount = this.nextVarInt();
            const starts = new Set();
            for (let i = 0; i < startMethodsCount; i++) {
                starts.add(this.nextVarInt());
            }

            const lz = new Lz78Data(this, starts);

            let max = 1;

            let prevByte = -1;
            const blocksCount = this.nextVarInt();
            let counts = new Uint32Array(blocksCount);
            for (let i = 0; i < blocksCount; i++) {
                let v = 0;
                let p = 0;
                let hasMore = false;
                do {
                    if (prevByte === -1) {
                        prevByte = this.byteAt(this.pos++);
                        hasMore = (prevByte >>> 5) === 1;
                        v |= ((prevByte >>> 3) & 3) << p;
                        prevByte &= 7;
                    } else {
                        hasMore = (prevByte >>> 2) === 1;
                        v |= (prevByte & 3) << p;
                        prevByte = -1;
                    }
                    p += 2;
                } while (hasMore);
                counts[i] = v;
                max = Math.max(max, v);
            }

            this.blocks = lz.decode(counts);

            this.zoomToCounts = new Array(this.maxZoom);
            this.zoomToMaxes = new Array(this.maxZoom);

            this.zoomToCounts[0] = counts;
            this.zoomToMaxes[0] = max;

            for (let z = 1; z < zoomToGroupSize.length; z++) {
                const size = zoomToGroupSize[z] / zoomToGroupSize[z - 1];
                const nextCounts = new Uint32Array(Math.ceil(counts.length / size));
                for (let i = 0; i < counts.length; i++) {
                    const index = (i / size) | 0;
                    nextCounts[index] += counts[i];
                    max = Math.max(max, nextCounts[index]);
                }
                this.zoomToCounts[z] = counts = nextCounts;
                this.zoomToMaxes[z] = max;
            }

            this.data = null;
        }

        setZoom(zoom) {
            this.zoom = zoom;
        }

        heatmap() {
            return this.zoomToCounts[this.zoom];
        }

        max() {
            return this.zoomToMaxes[this.zoom];
        }

        currentTimeBlock() {
            // FIXME 20 is hardcoded
            return 20 * zoomToGroupSize[this.zoom];
        }

        startBlock() {
            const blockMs = this.currentTimeBlock();
            const timeBlockMs = blockMs * heatHeight * 20;
            return Math.floor(startMs % timeBlockMs / blockMs);
        }

        count() {
            return Math.ceil((this.heatmap().length + this.startBlock()) / 20 / heatHeight) * 20 * heatHeight;
        }

    }

    class LzChunk extends Uint32Array {
        constructor(size) {
            super(size);
        }

        copyWithNext(element) {
            let result = new LzChunk(this.length + 1);
            result.set(this);
            result[this.length] = element;
            return result;
        }
    }

    class Lz78Data {
        data;
        starts;
        lz78;

        tmp = [];
        prevSubTreeId = -1;

        constructor(data, starts) {
            this.data = data;
            this.starts = starts;

            this.lz78 = [new LzChunk(0)];
        }

        decode(counts) {
            const synonymsCount = this.data.nextVarInt();
            const synonyms = new Uint32Array(synonymsCount);
            for (let i = 0; i < synonymsCount; i++) {
                synonyms[i] = this.data.nextVarInt();
            }

            const tailsCount = this.data.nextVarInt();
            const tails = new Uint32Array(tailsCount);
            for (let i = 0; i < tailsCount; i++) {
                const tail = this.data.nextVarInt();
                tails[i] = (tail < synonyms.length ? synonyms[tail] : tail) - synonymsCount;
            }

            const result = new Array(counts.length);
            for (let i = 0; i < counts.length; i++) {
                result[i] = new Array(counts[i]);
            }

            let thisChunk = null;
            let currentTail = 0;
            const tmp = [];
            let t = -1;
            for (let block of result) {
                for (let i = 0; i < block.length; i++, currentTail++) {
                    t++;
                    const tailId = tails[currentTail];
                    if (tailId < this.lz78.length) {
                        const tail = this.lz78[tailId];
                        if (tail.length !== 0 && this.starts.has(tail[0])) {
                            console.log(t, 'only', tailId);
                            block[i] = tail;
                            continue;
                        }
                    }

                    if (thisChunk === null) {
                        const chunkId = this.data.nextVarInt();
                        const prevChunk = this.lz78[(chunkId < synonyms.length ? synonyms[chunkId] : chunkId) - synonymsCount];
                        const addMethodId = this.data.nextVarInt();
                        console.log(t, 'chunk', chunkId, addMethodId);
                        thisChunk = prevChunk.copyWithNext(addMethodId);
                        this.lz78.push(thisChunk);
                    }

                    tmp.length = 0;
                    tmp.push(...thisChunk); // FIXME it is ok to push as is, or even as lz78 index

                    while (true) {
                        const chunkId = this.data.nextVarInt();
                        const prevChunk = this.lz78[(chunkId < synonyms.length ? synonyms[chunkId] : chunkId) - synonymsCount];
                        const addMethodId = this.data.nextVarInt();
                        thisChunk = prevChunk.copyWithNext(addMethodId);
                        this.lz78.push(thisChunk);
                        console.log(t, 'chunk', chunkId, addMethodId);

                        if (this.starts.has(thisChunk[0])) {
                            console.log(t, 'starts', thisChunk[0]);
                            console.log(t, 'ends', tailId);
                            const tail = this.lz78[tailId];
                            tmp.push(...tail);
                            block[i] = new Uint32Array(tmp);
                            break;
                        } else {
                            tmp.push(...thisChunk);
                        }
                    }
                }
            }

            return result;
        }
    }

    class Queue {
        data = new Array(1024);
        first = 0;
        afterLast = 0;

        push(e) {
            let a = this.afterLast;
            let d = this.data;
            d[a++] = e;
            if (a >= this.data.length) {
                a = 0;
            }
            if (a === this.first) {
                let d2 = new Array(d.length * 2);
                let i = 0;
                for (let p = a; p < d.length; p++) {
                    d2[i++] = d[p];
                }
                for (let p = 0; p < a; p++) {
                    d2[i++] = d[p];
                }
                this.data = d2;
                this.first = 0;
                this.afterLast = i;
            } else {
                this.afterLast = a;
            }
        }

        shift() {
            let i = this.first;
            let r = this.data[i++];
            if (i >= this.data.length) {
                this.first = 0;
            } else {
                this.first = i;
            }
            return r;
        }

        size() {
            let r = this.afterLast - this.first;
            if (r < 0) {
                return r + this.data.length;
            }
            return r;
        }

        reset() {
            this.first = this.afterLast = 0;
        }
    }

    function claimHtml(id) {
        let e = document.getElementById(id);
        let r = e.innerHTML;
        e.remove();
        return r;
    }

    let sq = 5;
    let sqPx = sq;
    let sqScale = 1;
    const canvasScrollPadding = 200;
    let canvasTimeHeight = 12;
    let canvasTimeHeightPx = 12;
    let ticksPerSecond = 1000000000;
    let startMs = 1665002010045;

    const zoomToGroupSize = [
        1,              // 20 ms
        50,             // 1 s
        50 * 5,         // 5 s
        50 * 60         // 1 m
    ];
    const zoomToHeight = [50, 60, 60, 60]

    let methods = new DataBuffer(claimHtml("methods"));
    let executionsHeatmap = new HeatmapCollection(claimHtml("executionsHeatmap"));
    let cpool = ["all","","one.nio.server.AcceptorThread","run","one.nio.net.Socket","acceptNonBlocking","one.nio.net.JavaServerSocket","accept","sun.nio.ch.ServerSocketChannelImpl","implAccept","sun.nio.ch.Net","java.net.Inet4Address","java.lang.Thread","java.util.concurrent.ThreadPoolExecutor$Worker","java.util.concurrent.ThreadPoolExecutor","runWorker","ok.dht.test.ilin.servers.ExpandableHttpServer$$Lambda$66.0x0000000800cc8680","ok.dht.test.ilin.servers.ExpandableHttpServer","lambda$handleRequest$0","one.nio.http.HttpServer","handleRequest","RequestHandler0_getEntity","ok.dht.test.ilin.service.EntityService","getEntity","org.rocksdb.RocksDB","get","byte[]","one.nio.http.HttpSession","sendResponse","writeResponse","one.nio.net.Session","write","one.nio.net.Session$ArrayQueueItem","one.nio.net.JavaSocket","java.nio.ByteBuffer","wrap","java.nio.HeapByteBuffer","getTask","java.util.concurrent.LinkedBlockingQueue","take","java.util.concurrent.locks.ReentrantLock","lockInterruptibly","java.util.concurrent.locks.ReentrantLock$Sync","java.util.concurrent.locks.AbstractQueuedSynchronizer","acquireInterruptibly","acquire","java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode","one.nio.server.SelectorThread","process","processRead","read","one.nio.http.Response","toBytes","one.nio.util.ByteArrayBuilder","<init>","processHttpBuffer","handleParsedRequest","java.lang.invoke.Invokers$Holder","linkToTargetMethod","java.lang.invoke.DirectMethodHandle$Holder","newInvokeSpecial","java.lang.invoke.DirectMethodHandle","allocateInstance","ok.dht.test.ilin.servers.ExpandableHttpServer$$Lambda$66+0x0000000800cc8680","parseRequest","one.nio.util.Utf8","toAsciiString","one.nio.http.Request","getRequiredParameter","getParameter","java.lang.String","substring","java.lang.StringLatin1","newString","java.lang.String[]","java.util.Arrays","copyOfRange","getPath","getBytes","encode","encodeUTF8","copyOf","one.nio.net.JavaSelector","select","sun.nio.ch.SelectorImpl","lockAndDoSelect","sun.nio.ch.KQueueSelectorImpl","doSelect","processEvents","processReadyEvents","java.util.HashSet","add","java.util.HashMap","put","putVal","newNode","java.util.HashMap$Node","java.lang.invoke.LambdaForm$MH.0x0000000800ccc400","invokeExact_MT","java.lang.invoke.LambdaForm$DMH.0x0000000800ccc800","java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject","await","java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode","iteratorFor","one.nio.net.JavaSelector$1","one.nio.net.Session[]","sun.nio.ch.Util$2","iterator","java.util.HashMap$KeySet","java.util.HashMap$KeyIterator","execute","offer","java.util.concurrent.LinkedBlockingQueue$Node","signalNotEmpty","lock",];

    let currentHeatmap = executionsHeatmap;
    let currentHeatmapType = 'executions';

    let heatHeight = 60;

    let heatLastSample = -1;
    let heatActiveSample1 = -1;
    let heatActiveSample2 = -1;
    let heatDiffStart = -1;
    let heatDiffEnd = -1;
    let highlightStart = -1;
    let highlightEnd = -1;

    const titleText = document.getElementById("title").textContent;
    document.getElementById("title").style.display = 'none';
    document.title = titleText;

    const heatCanvas = document.getElementById('heatmap-canvas');
    const heatStatus = document.getElementById('status');
    const heatCanvasWrapper = document.getElementById('heatmap-canvas-wrapper');
    const heatCanvasContainer = document.getElementById('heatmap-canvas-container');

    let heatC;
    let prevDx = -1000000000;

    let searchExecutedCount = 0;
    let searchMax = 0;

    const timeOptions = {
        year: '2-digit',
        month: '2-digit',
        day: '2-digit',
        timeZoneName: 'short',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        fractionalSecondDigits: 2
    };

    const timeOptionsShort = {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        fractionalSecondDigits: 2
    };

    const timeOptionsTiny = {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hourCycle: 'h23',
        //hour12: false
    };

    function methodInfo(methodIndex, out) {
        if (methodIndex === -1) {
            out.className = '';
            out.methodName = 'all';
            out.location = 0;
            out.type = 3;
            return;
        }

        methodIndex--;

        let methodAndClass = methods.int36(methodIndex * 12);
        let locationAndType = methods.int36(methodIndex * 12 + 6)
        let className = (methodAndClass & 0x3FFFF) - 1;
        let methodName = (methodAndClass >>> 18) - 1;

        out.className = cpool[className];
        out.methodName = cpool[methodName];
        out.location = locationAndType >>> 4;
        out.type = locationAndType & 15;
    }

    function title(methodIndex, out) {
        methodInfo(methodIndex, out);
        const codeLine = (out.location & 0xffff);
        let locationSuffix = codeLine === 0 ? "" : (":" + codeLine);

        if (out.methodName === '') {
            return out.className + locationSuffix;
        }
        if (out.className === '') {
            return out.methodName + locationSuffix;
        }
        if (out.type >= 3 && out.type <= 5) {
            return out.methodName + locationSuffix;
        }

        return out.className + "." + out.methodName + locationSuffix;
    }

    let bgInterval = null;
    let bgTasks = [];
    let cooldownTime = 0;
    let nextTask = 0;

    function addTask(id, iteration, afterFrame) {
        for (let t of bgTasks) {
            if (t.id === id) {
                t.f = iteration;
                t.a = afterFrame;
                return;
            }
        }

        bgTasks.push({id: id, f: iteration, a: afterFrame});
        if (bgTasks.length === 1) {
            bgInterval = setInterval(function() {
                let start = performance.now();
                if (start <= cooldownTime) {
                    return;
                }
                let overflow = false;
                do {
                    let task = bgTasks[nextTask];
                    if (task.f()) {
                        nextTask++;
                    } else {
                        bgTasks.splice(nextTask, 1);
                        if (bgTasks.length === 0) {
                            clearInterval(bgInterval);
                            nextTask = 0;
                            return;
                        }
                    }

                    if (nextTask >= bgTasks.length) {
                        nextTask = 0;
                        overflow = true;
                    }
                } while(performance.now() - start < 8);

                for (let q = 0; q < overflow ? bgTasks.length : nextTask; q++) {
                    bgTasks[q].a();
                }
            })
        }
    }

    function prepareFrames(from, to) {
        let mul = zoomToGroupSize[currentHeatmap.zoom];
        from *= mul;
        to = (to + 1) * mul - 1;
        if (to >= currentHeatmap.blocks.length) {
            to = currentHeatmap.blocks.length - 1;
        }

        const frames = new Queue();
        const root = new Map();
        root.c = 0;
        root.m = -1;
        root.x = 0;
        const roots = [root];
        let levelsCount = 1;

        for (let pos = from; pos <= to; pos++) {
            const block = currentHeatmap.blocks[pos];

            root.c += block.length;

            for (let stack of block) {
                levelsCount = Math.max(stack.length + 1, levelsCount);

                frames.push(root);
                frames.push(stack);
            }
        }

        return [frames, roots, levelsCount]
    }

    function nextFrames(frames, level) {
        frames.push(null);  // end stacks marker

        let nowFrame = null;

        while (true) {
            const frame = frames.shift();
            if (frame === null) {   // end stack marker
                break;
            }

            const stack = frames.shift();
            if (level >= stack.length) {
                continue;
            }

            const methodId = stack[level];
            nowFrame = frame.get(methodId);
            if (nowFrame === undefined) {
                nowFrame = new Map();
                nowFrame.m = methodId;
                nowFrame.c = 0;
                frame.set(methodId, nowFrame);
            }
            nowFrame.c++;

            frames.push(nowFrame);
            frames.push(stack);
        }
    }

    function renderTraces(from, to) {
        let [frames, roots, levelsCount] = prepareFrames(from, to);
        levels.length = 0;
        for (let i = 0; i < levelsCount; i++) {
            levels.push([]);
        }

        let currentLevel = 0;
        let levelToRedraw = 0;
        let methodInfoOut = {};

        addTask('flame', function () {
                nextFrames(frames, currentLevel);

                let level = levels[currentLevel];
                let nextRoots = [];
                for (let root of roots) {
                    let x = root.x;
                    const t = title(root.m, methodInfoOut);
                    let color = getColor(palette[methodInfoOut.type]);
                    level.push({left: x, width: root.c, color: color, title: t});

                    let nextFrames = [...root.values()];

                    nextFrames.sort((k1, k2) => k2.c - k1.c);
                    for (let frame of nextFrames) {
                        frame.x = x;
                        x += frame.c;
                        nextRoots.push(frame);
                    }
                }
                level.sort((k1, k2) => k1.left - k2.left);

                roots = nextRoots;
                currentLevel++;
                if (currentLevel < levelsCount) {
                    return true;
                }
                renderWithMatch(levelsCount * 16, levels[0][0], 0);
                return false;
            },
            function () {
                renderWithMatch(4096, levels[0][0], 0, levelToRedraw);
                levelToRedraw = currentLevel;
            });
    }

    function renderWithMatch(newCanvasHeight, root, level, minLevel) {
        newCanvasHeight = Math.min(32767, newCanvasHeight);
        if (canvasHeight !== newCanvasHeight) {
            canvasHeight = newCanvasHeight;
            canvas.style.height = canvasHeight + 'px';
            canvas.height = canvasHeight * (devicePixelRatio || 1);
            c = canvas.getContext('2d');
            if (devicePixelRatio) c.scale(devicePixelRatio, devicePixelRatio);
            c.font = document.body.style.font;
        }
        const matched = render(root, level, minLevel);
        if (pattern === undefined) {
            document.getElementById('match').style.display = 'none';
            document.getElementById('produced').style.display = 'inherit';
        } else {
            document.getElementById('matchval').textContent = pct(matched, root.width) + '%';
            document.getElementById('match').style.display = 'inline-block';
            document.getElementById('produced').style.display = 'none';
        }
    }

    function renderDiff(from, to, baseFrom, baseTo) {
        let [frames, roots, levelsCount] = prepareFrames(from, to);
        let [baseFrames, baseRoots, ] = prepareFrames(baseFrom, baseTo);
        roots[0].b = baseRoots[0];

        levels.length = 0;
        for (let i = 0; i < levelsCount; i++) {
            levels.push([]);
        }
        let currentLevel = 0;
        let levelToRedraw = 0;
        let methodInfoOut = {};

        let minDiff = 0;
        let maxDiff = 0;

        addTask('flame', function () {
                nextFrames(frames, currentLevel);
                nextFrames(baseFrames, currentLevel);
                let level = levels[currentLevel];

                for (let root of roots) {
                    let wasCount = root.b === undefined ? 0 : root.b.c;
                    if (wasCount !== 0) {
                        maxDiff = Math.max(maxDiff, root.c - wasCount);
                        minDiff = Math.min(minDiff, root.c - wasCount)
                    }
                }

                let nextRoots = [];
                for (let root of roots) {
                    let x = root.x;

                    let wasCount = root.b === undefined ? 0 : root.b.c;
                    const t = title(root.m, methodInfoOut) + " (" + root.c + "/" + wasCount +")";
                    let color;
                    if (wasCount === 0) {
                        color = "#dac571";
                    } else if (wasCount >= root.c) {
                        const ratio = (root.c - wasCount) / minDiff;
                        color = 'rgb(' + (245 - 90 * ratio) + ',' + (250 - 90 * ratio) + ',' + 255 +')';
                    } else {
                        const ratio = (root.c - wasCount) / maxDiff;
                        color = 'rgb(' + 255 + ',' + (245 - 180 * ratio) + ',' + (240 - 200 * ratio) +')';
                    }
                    level.push({left: x, width: root.c, color: color, title: t});

                    let nextFrames = [];
                    for (let [methodId, frame] of root) {
                        frame.b = root.b && root.b.get(methodId);
                        nextFrames.push(frame);
                    }
                    nextFrames.sort((k1, k2) => k2.c - k1.c);
                    for (let frame of nextFrames) {
                        frame.x = x;
                        x += frame.c;
                        nextRoots.push(frame);
                    }
                }
                level.sort((k1, k2) => k1.left - k2.left);

                roots = nextRoots;
                currentLevel++;
                if (currentLevel < levelsCount) {
                    return true;
                }
                renderWithMatch(levelsCount * 16, levels[0][0], 0);
                return false;
            },
            function () {
                renderWithMatch(4096, levels[0][0], 0, levelToRedraw);
                levelToRedraw = currentLevel;
            });
    }

    function redrawHeatSamplesImpl(from, to, dx) {
        const patternDraw = !!pattern;
        const startBlock = currentHeatmap.startBlock();

        const max = currentHeatmap.max();
        const heatmap = currentHeatmap.heatmap();

        for (let index = from; index <= to; index++) {
            let color;
            let i = index - startBlock;
            if (i < 0 || i >= heatmap.length) {
                color = '#ddd';
            } else {
                let count = heatmap[i];

                let useFound = patternDraw && searchExecutedCount > i;
                let maxValue = useFound ? searchMax : max;
                let value = useFound ? found[i] : count;
                let ratio = value / (maxValue || 1);

                if (useFound) {
                    if (ratio < 0.8) {
                        let value = Math.round(255 - ratio * 255 / 0.8);
                        color = 'rgb(' + value + ',' + value + ',255)';
                    } else {
                        let value = Math.round(255 - (ratio - 0.8) * 100 / 0.2);
                        color = 'rgb(0,0,' + value + ')';
                    }
                } else {
                    if (ratio < 0.8) {
                        let value = Math.round(255 - ratio * 255 / 0.8);
                        color = 'rgb(255,' + value + ',' + value + ')';
                    } else {
                        let value = Math.round(255 - (ratio - 0.8) * 100 / 0.2);
                        color = 'rgb('+ value + ',0,0)';
                    }
                }

            }
            heatC.fillStyle = color;

            let x = Math.floor(index / heatHeight);
            let y = index % heatHeight;
            heatC.fillRect(x * sq - dx, y * sq + canvasTimeHeight, sq, sq);
        }

        let blocksBetweenMarks = 20;

        let fromBlock = Math.floor(from / blocksBetweenMarks / heatHeight) - 1;
        let toBlock = Math.ceil(to / blocksBetweenMarks / heatHeight);

        let markPixels = blocksBetweenMarks * sq;

        heatC.fillStyle = '#fff';
        heatC.fillRect(
            fromBlock * markPixels - dx,
            0,
            (toBlock - fromBlock + 1) * markPixels,
            canvasTimeHeight
        );

        heatC.beginPath();
        heatC.moveTo(fromBlock * markPixels - dx + 0.5, canvasTimeHeight + 0.5);
        heatC.lineTo(toBlock * markPixels - dx + 0.5, canvasTimeHeight + 0.5);
        heatC.stroke();

        heatC.fillStyle = '#000';

        let groupSize = heatHeight;
        let oneBlockMs = currentHeatmap.currentTimeBlock();
        let oneGroupMs = oneBlockMs * groupSize;
        let oneMarkMs = oneGroupMs * blocksBetweenMarks;
        for (let markIndex = fromBlock; markIndex <= toBlock; markIndex++) {
            let origin = Math.floor(startMs / oneMarkMs) * oneMarkMs;
            let ms = origin + markIndex * oneMarkMs;
            let markOffset = markIndex * markPixels - dx;

            let title = new Date(ms).toLocaleTimeString(undefined, timeOptionsTiny);

            let w = heatC.measureText(title).width;
            let x = markOffset + (markPixels - w) / 2;
            heatC.fillText(title, x, canvasTimeHeight - 1, markPixels);

            heatC.beginPath();
            heatC.moveTo(markOffset + 0.5, canvasTimeHeight - 2 * sqScale + 0.5);
            heatC.lineTo(markOffset + 0.5, canvasTimeHeight + 2 * sqScale + 0.5);
            heatC.stroke();
        }
    }

    function redrawHeatSamples(from, to) {
        let dx = Math.floor((heatCanvasContainer.scrollLeft - canvasScrollPadding) * sqScale);

        from = Math.max(from, heatHeight * Math.floor(dx / sq));
        to = Math.min(to, heatHeight * Math.ceil((dx + heatCanvas.width) / sq));
        redrawHeatSamplesImpl(from, to, dx);
    }

    function redrawHeatMap() {
        redrawHeatSamples(0, (1 + currentHeatmap.count() / heatHeight | 0) * heatHeight);
    }

    function fillCanvasWithEvents(zoom) {
        searchExecutedCount = 0;
        searchMax = 0;

        addTask('search', function () {
            return false;
        }, function (){});

        currentHeatmap.setZoom(zoom);
        heatHeight = zoomToHeight[zoom];

        const m = devicePixelRatio || 1;
        sqScale = m;
        sqPx = 5;
        sq = Math.floor(sqPx * m);
        sqPx = sq / m;
        canvasTimeHeight = sq * 2 + 2;
        canvasTimeHeightPx = canvasTimeHeight / m;

        const widthPx = canvasScrollPadding + heatCanvasContainer.offsetWidth + canvasScrollPadding;
        const heightPx = sqPx * heatHeight + canvasTimeHeightPx;

        const heatWidthPx = Math.max(20, Math.ceil(currentHeatmap.count() / heatHeight)) * sqPx;
        heatCanvasWrapper.style.width = heatWidthPx + 'px';
        if (heatCanvasContainer.offsetWidth > heatWidthPx) {
            heatCanvasContainer.style.overflowX = 'hidden';
        } else {
            heatCanvasContainer.style.overflowX = 'scroll';
        }

        heatCanvas.width = Math.ceil(widthPx * m);
        heatCanvas.height = Math.ceil(heightPx * m);
        heatCanvas.style.width = widthPx + 'px';
        heatCanvas.style.height = heightPx + 'px';

        heatC = heatCanvas.getContext('2d');
        heatC.font = sq * 2 + 'px Verdana, sans-serif';
        heatC.lineWidth = 1;
        heatC.strokeStyle = '#000';

        document.getElementById('heatmap-height-line').textContent = [' 1 sec : 20 ms ',' 1 min : 1 sec ',' 5 min : 5 sec ',' 1 hr  : 1 min '][currentHeatmap.zoom];
        redrawHeatMap();
    }

    let found = new Uint32Array(0);

    function searchIterative(r) {
        if (r && (r = prompt('Enter regexp to search:', '')) === null) {
            return;
        }
        searchExecutedCount = 0;
        searchMax = 0;
        if (!r) {
            pattern = undefined;
            redrawHeatMap();
            addTask('search', function () {
                return false;
            }, function (){});
            return;
        }
        let renderFrom = 0;
        let heatmap = currentHeatmap.heatmap();
        let count = heatmap.length;
        found = new Uint32Array(count);
        let start = currentHeatmap.startBlock();
        function renderFunc() {
            redrawHeatSamples(start + renderFrom, start + searchExecutedCount - 1);
            renderFrom = searchExecutedCount;
        }
        pattern = r ? RegExp(r) : undefined;
        const matchedMethods = new Set();
        const methodOut = {};
        for (let index = methods.data.length / 12; index >= 0; index--) {
            if (pattern.test(title(index, methodOut))) {
                matchedMethods.add(index);
            }
        }

        let mul = zoomToGroupSize[currentHeatmap.zoom];

        addTask('search', function () {
            let amount = 0;
            const from = searchExecutedCount * mul;
            const to = (searchExecutedCount + 1) * mul;
            for (let i = from; i < to; i++) {
                const stacks = currentHeatmap.blocks[i];
                if (stacks === undefined) {
                    continue;
                }

                for (let stack of stacks) {
                    for (let methodIndex of stack) {
                        if (matchedMethods.has(methodIndex)) {
                            amount++;
                            break;
                        }
                    }
                }
            }

            if (searchMax < amount) {
                renderFrom = 0;
                searchMax = amount;
            }

            found[searchExecutedCount] = amount;
            searchExecutedCount++;
            if (searchExecutedCount >= count) {
                renderFunc();

                const matched = render(root, rootLevel);
                document.getElementById('matchval').textContent = pct(matched, root.width) + '%';
                document.getElementById('match').style.display = r ? 'inherit' : 'none';
                document.getElementById('produced').style.display = r ? 'none' : 'inherit';

                return false;
            }
            return true;
        }, renderFunc);

    }

    function renderHeatmap() {
        let dx = heatCanvasContainer.scrollLeft - canvasScrollPadding;
        heatCanvas.style.transform = 'translate(' + dx + 'px, 0px)';

        const width = Math.floor(heatCanvasContainer.offsetWidth / sq / (devicePixelRatio || 1));

        let z = 0;
        for (; z < zoomToGroupSize.length; z++) {
            if (currentHeatmap.blocks.length / (zoomToGroupSize[z] * zoomToHeight[z]) < width) {
                break;
            }
        }

        fillCanvasWithEvents(Math.min(z, currentHeatmap.maxZoom - 1));

        renderTraces(0, currentHeatmap.heatmap().length - 1);
    }

    heatCanvasContainer.addEventListener('scroll', function() {
        let dx = Math.floor((heatCanvasContainer.scrollLeft - canvasScrollPadding) * sqScale);
        let dxPx = dx / sqScale;
        heatCanvas.style.transform = 'translate(' + dxPx + 'px, 0px)';
        let delta = Math.abs(dx - prevDx);
        if (delta >= heatCanvas.width || searchExecutedCount !== 0) {
            redrawHeatMap();
        } else {
            heatC.drawImage(heatCanvas, prevDx - dx, 0);
            if (prevDx < dx) {
                let from = heatHeight * Math.floor((prevDx + heatCanvas.width) / sq);
                let to = heatHeight * Math.ceil((dx + heatCanvas.width) / sq);
                redrawHeatSamplesImpl(from, to, dx);
            } else {
                let from = heatHeight * Math.floor(dx / sq);
                let to = heatHeight * Math.ceil(prevDx / sq);
                redrawHeatSamplesImpl(from, to, dx);
            }
        }
        prevDx = dx;
        cooldownTime = performance.now() + 500;
    });

    document.getElementById('heatmap-height-line').onclick = function() {
        fillCanvasWithEvents((currentHeatmap.maxZoom + currentHeatmap.zoom - 1) % (currentHeatmap.maxZoom));
        highlightStart = highlightEnd = heatDiffStart = heatDiffEnd = heatActiveSample1 = heatActiveSample2 = -1;
        for (let suffix of ['Selection', 'Diff', 'Active']) {
            for (let prefix of ['left', 'leftMiddle', 'middle', 'rightMiddle', 'right']) {
                document.getElementById(prefix + suffix).style.display = 'none';
            }
        }
    }

    function callHighlightRedraw(start, end, suffix) {
        let left = document.getElementById('left' + suffix);
        let leftMiddle = document.getElementById('leftMiddle' + suffix);
        let middle = document.getElementById('middle' + suffix);
        let rightMiddle = document.getElementById('rightMiddle' + suffix);
        let right = document.getElementById('right' + suffix);

        let x1 = Math.floor(start / heatHeight);
        let y1 = start % heatHeight;
        let x2 = Math.floor(end / heatHeight);
        let y2 = end % heatHeight;

        let veryStartX = x1 * sqPx;
        let veryStartY = y1 * sqPx;
        let veryEndX = x2 * sqPx;
        let px = 1 / sqScale;
        let singleElementWidth = sqPx + px;

        let topPadding = canvasTimeHeightPx;

        if (x1 === x2) {
            left.style.display = 'none';
            right.style.display = 'none';

            for (let b of [middle, leftMiddle, rightMiddle]) {
                b.style.left = veryStartX + 'px';
                b.style.top = topPadding + veryStartY + 'px';
                b.style.width = singleElementWidth + 'px';
                b.style.height = (y2 - y1 + 1) * sqPx + px + 'px';
                b.style.display = 'block';
            }
        } else {
            left.style.left = veryStartX + 'px';
            left.style.top = topPadding + veryStartY + 'px';
            left.style.width = singleElementWidth + 'px';
            left.style.height = (heatHeight - y1) * sqPx + px + 'px';
            left.style.display = 'block';

            leftMiddle.style.left = veryStartX + 'px';
            leftMiddle.style.top = topPadding + 'px';
            leftMiddle.style.width = singleElementWidth + 'px';
            leftMiddle.style.height = y1 * sqPx + px + 'px';
            leftMiddle.style.display = 'block';

            rightMiddle.style.left = veryEndX + 'px';
            rightMiddle.style.top = topPadding + (y2 + 1) * sqPx + 'px';
            rightMiddle.style.width = sqPx + px + 'px';
            rightMiddle.style.height = (heatHeight - y2 - 1) * sqPx + px + 'px';
            rightMiddle.style.display = 'block';

            right.style.left = veryEndX + 'px';
            right.style.top = topPadding + 'px';
            right.style.width = sqPx + px + 'px';
            right.style.height = (y2 + 1) * sqPx + px + 'px';
            right.style.display = 'block';

            if (x2 - x1 === 1) {
                middle.style.display = 'none';
            } else {
                middle.style.left = veryStartX + sqPx + px + 'px';
                middle.style.top = topPadding + 'px';
                middle.style.width = (x2 - x1 - 1) * sqPx - px + 'px';
                middle.style.height = heatHeight * sqPx + px + 'px';
                middle.style.display = 'block';
            }
        }
    }

    function callSelectionRedraw(sample, shiftPressed, ctrlPressed) {
        if (ctrlPressed) {
            highlightStart = sample;
            highlightEnd = sample + Math.abs(heatActiveSample1 - heatActiveSample2);
        } else if (shiftPressed && heatActiveSample1 !== -1) {
            highlightStart = Math.min(heatActiveSample1, sample);
            highlightEnd = Math.max(heatActiveSample1, sample);
        } else {
            highlightStart = highlightEnd = sample;
        }

        callHighlightRedraw(highlightStart, highlightEnd, 'Selection');

        const index = sample - currentHeatmap.startBlock();
        const heatmap = currentHeatmap.heatmap();
        if (index >= 0 && index < heatmap.length) {
            const ms = startMs + currentHeatmap.currentTimeBlock() * index;
            const total =  heatmap[index];
            const max = currentHeatmap.max();
            heatCanvas.title = new Date(ms).toLocaleTimeString(undefined, timeOptionsShort) + " " + index;  // FIXME
            const totalText = "total: " + total + " (" + Math.floor(total / max * 100) + "%)";
            const searchText = searchExecutedCount > index
                ? "; match: " + found[index] + " (" + Math.floor(found[index] / Math.max(total, 1) * 100) + "%)"
                : "";
            status.textContent = totalText + searchText;
            status.style.display = 'inline';
        } else {
            status.style.display = 'none';
        }
    }

    function callActiveRedraw(sample, shiftPressed, ctrlPressed) {
        if (ctrlPressed) {
            let minSelected = Math.min(heatActiveSample1, heatActiveSample2);
            let maxSelected = Math.max(heatActiveSample1, heatActiveSample2);

            heatDiffStart = highlightStart;
            heatDiffEnd = highlightEnd;

            callHighlightRedraw(highlightStart, highlightEnd, 'Diff');
            renderDiff(
                minSelected - currentHeatmap.startBlock(),
                maxSelected - currentHeatmap.startBlock(),
                heatDiffStart - currentHeatmap.startBlock(),
                heatDiffEnd - currentHeatmap.startBlock()
            );
        } else {
            heatDiffStart = -1;
            heatDiffEnd = -1;
            if (shiftPressed && heatActiveSample1 !== -1) {
                heatActiveSample2 = sample;
            } else {
                heatActiveSample1 = heatActiveSample2 = sample;
            }

            let minSelected = Math.min(heatActiveSample1, heatActiveSample2);
            let maxSelected = Math.max(heatActiveSample1, heatActiveSample2);

            callHighlightRedraw(highlightStart, highlightEnd, 'Diff');
            callHighlightRedraw(minSelected, maxSelected, 'Active');
            renderTraces(
                Math.max(0, minSelected - currentHeatmap.startBlock()),
                Math.min(currentHeatmap.heatmap().length - 1, maxSelected - currentHeatmap.startBlock())
            );
        }
    }

    window.addEventListener('keydown', function (e) {
        if (e.key === 'Shift') {
            callSelectionRedraw(heatLastSample, true, e.ctrlKey);
        } else if (e.key === 'Control') {
            callSelectionRedraw(heatLastSample, e.shiftKey, true);
        }
    });

    window.addEventListener('keyup', function (e) {
        if (e.key === 'Shift') {
            callSelectionRedraw(heatLastSample, false, e.ctrlKey);
        } else if (e.key === 'Control') {
            callSelectionRedraw(heatLastSample, e.shiftKey, false);
        }
    });

    heatCanvas.onmousemove = function (event) {
        let x = Math.floor((event.offsetX + heatCanvasContainer.scrollLeft - canvasScrollPadding) / sqPx);
        let y = Math.floor(Math.max(0, event.offsetY - canvasTimeHeightPx) / sqPx);
        if (y >= heatHeight) {
            y = heatHeight - 1;
        }
        heatLastSample = x * heatHeight + y;
        if ((event.buttons & 1) === 1) {
            callSelectionRedraw(heatLastSample, true, event.ctrlKey);
        } else {
            callSelectionRedraw(heatLastSample, event.shiftKey, event.ctrlKey);
        }
    }

    heatCanvas.onmouseout = function () {
        status.style.display = 'none';
    };

    heatCanvas.onmousedown = function (event) {
        let x = Math.floor((event.offsetX + heatCanvasContainer.scrollLeft - canvasScrollPadding) / sqPx);
        let y = Math.floor(Math.max(0, event.offsetY - canvasTimeHeightPx) / sqPx);
        let sample = x * heatHeight + y;

        callActiveRedraw(sample, event.shiftKey, event.ctrlKey);
    };

    heatCanvas.onmouseup = function (event) {
        let x = Math.floor((event.offsetX + heatCanvasContainer.scrollLeft - canvasScrollPadding) / sqPx);
        let y = Math.floor(Math.max(0, event.offsetY - canvasTimeHeightPx) / sqPx);
        let sample = x * heatHeight + y;

        callActiveRedraw(sample, true, event.ctrlKey);
    };



init();
// FIXME search(/*highlight:*/);
</script></body></html>
